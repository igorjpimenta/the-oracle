name: the-oracle

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: agent_api
    ports:
      - "${PORT}:4000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_SSL=false
    volumes:
      - .:/app
      - /app/.venv
      - redis_data:/var/lib/redis-stack
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agent-network

  redis:
    build:
      context: .
      dockerfile: Dockerfile.redis
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT:-6379}
    volumes:
      - redis_data:/var/lib/redis-stack
    networks:
      - agent-network

    env_file:
      - .env
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli $([ -n \"$REDIS_PASSWORD\" ] && echo \"-a $REDIS_PASSWORD\") ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    container_name: postgres
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - agent-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  agent-network:
    driver: bridge
